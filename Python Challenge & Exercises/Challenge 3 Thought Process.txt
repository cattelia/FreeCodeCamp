This is my first attempt at solving twoSum() challenge.
Apparently it is the first challenge on leet code, which I do not know what that is. I thought I would get it a try.
This is a document that went through my thought process on solving this problem.


Problem:
Given an array of numbers, find the two numbers that equal the sum.
Input:
    array = [1,3,4,6,11,23]
    sum = 9
Output: 
    (3, 6) or (6, 3)


Fundamentals to keep in mind:
1. I need to be able to keep track of 2 different numbers at the same time to sum them together.
2. These two numbers cannot be the same position, even if they sum to the correct answer.
3. Different positions can have the same or different values (See "2.")
4. I need to be able to move one position at a time:

    first = 0
    second = 0 - 1 - 2 - 3 - 4 - 5
    # skip second.0, second = 0, first += 1

    first = 1
    second = 0 - 1 - 2 - 3 - 4 - 5
    # skip second.1, second = 0, first += 1

    first = 2
    second = 0 - 1 - 2 - 3 - 4 - 5
    # skip second.2, second = 0, first += 1

    first = 3
    second = 0 - 1

    I found it! first.3 = 6 + second.1 = 3 == 9
    return first.3, second.1

Alright, so now that I have the fundamentals of what I need, time to solve it.

Where to start?
I knew I needed to keep track of my position somehow so I could iterate through the array.
At first, I thought I would do this with a while loop:
    '''
    # Can make the positions but this is clunky. Let's try something else.
    i = 0
    while i != 6: #The length of the array is 6 but it indexes to 5.
        print(array[i])
        i += 1
    '''

    but as my note had already alluded too. This was bad form.

Luckily for me, Python has this amazing little function: enumerate() which allows me to get the value and index in the array, returning a tuple.
    Let's do that.
        for i in enumerate(array, 0):
            ...
        
As it turned out, this turned out to be a good start but I quickly found that this was not going to do the job [completely].
You see, I still had to find a way that I could compare two different indeces together, which I spent a lot of time figuring out how to extract the value from the index.
What happens is that i is now not an index, it is a tuple with the value and index of the array.
This took me, again, a minute to work through. 

    '''
    i is a Tuple
    i[0] == Position in array {int}
    i[1] == Value in position of array {int}

    What I am looking at: (0, 1)
    Position in array 0
    Value in position 1

    What I am looking at: (1, 3)
    Position in array 1
    Value in position 3

    What I am looking at: (2, 4)
    Position in array 2
    Value in position 4

    What I am looking at: (3, 6)
    Value in position 6

    What I am looking at: (4, 11)
    Value in position 11

    What I am looking at: (5, 23)
    Value in position 23
    '''
I knew that 0 was the index and 1 was the value but I still had to sum two different values together.
Then it hit me, why not make two enumerate() calls and assign to two variables?!
Brilliant.

    first = list(enumerate(array, 0))
    second = list(enumerate(array, 0))

Notice here that I had used the list() because the enumerate() function return an enumerate object at a memory position but None is returned when trying to pull those values.
So to call those values, I then made it into a list of tuples and made two different lists: first and second.

Now when I use the for loop, comparing will be much easier.

Remember the fundamentals? I have to be able to change only one index at a time. If it the sum was not found, we have to reset second to 0. This was the job for two for loops.

    for i in first:
        for j in second:
            if i == j: 
                continue
            else:
                ...

We loop to the first tuple in the list then we loop through the second list. All we are checking right now is to see if position of first and second are the same position. If they are, we want to skip it because we want 2 integers that equal the sum, not just 1.

Okay, this worked. Let's try to find the sum. This will be held in the else: block.
As we found earlier, the following still holds true:
    i is a Tuple
    i[0] == Position in array {int}
    i[1] == Value in position of array {int}

So I want to use i[1] + j[1] to see if it equals the sum we are looking for.

            else:
                if i[1] + j[1] == sum:
                    return i[1], j[1]

Solution:

from array import *
def twoSum(array, sum):
    first = list(enumerate(array, 0))
    second = list(enumerate(array, 0))

    for i in first:
        for j in second:
            if i == j:
                continue
            else:
                if i[1] + j[1] == sum:
                    return i[1], j[1]

This precludes all of my print statements and at the end of the day, this is... looks really simpl but took me 2 hours to solve.

One day, I will be able to solve these quicker than this.

